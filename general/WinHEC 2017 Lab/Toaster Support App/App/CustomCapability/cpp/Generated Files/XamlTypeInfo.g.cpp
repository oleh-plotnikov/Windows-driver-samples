//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "App.xaml.h"
#include "MainPage.xaml.h"
#include "Scenario1_MeteringData.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "App.g.hpp"
#include "MainPage.g.hpp"
#include "Scenario1_MeteringData.g.hpp"

template<typename T>
::Platform::Object^ ActivateType()
{
    return ref new T;
}

template<typename TInstance, typename TItem>
void CollectionAdd(::Platform::Object^ instance, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Append((TItem)item);
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Insert((TKey)key, (TItem)item);
}

template<typename T>
::Platform::Object^ FromStringConverter(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)
{
    return ref new ::Platform::Box<T>((T)userType->CreateEnumUIntFromString(input));
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_SliderValue(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->SliderValue);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_SliderEnabled(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->SliderEnabled);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_StopButtonEnabled(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->StopButtonEnabled);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_StartButtonEnabled(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->StartButtonEnabled);
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_ViewModel(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->ViewModel;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_SampleMessage(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->SampleMessage;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_ActualRpcCallbackRate(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->ActualRpcCallbackRate;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_ExpectedRpcCallbackRate(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->ExpectedRpcCallbackRate;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_SliderValue(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->SliderValue = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_SliderEnabled(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->SliderEnabled = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_StopButtonEnabled(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->StopButtonEnabled = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_StartButtonEnabled(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->StartButtonEnabled = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_ViewModel(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ViewModel = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_SampleMessage(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->SampleMessage = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_ActualRpcCallbackRate(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ActualRpcCallbackRate = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_ExpectedRpcCallbackRate(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ExpectedRpcCallbackRate = safe_cast<TValue^>(value);
}

struct TypeInfo
{
    PCWSTR  typeName;
    PCWSTR contentPropertyName;
    ::Platform::Object^ (*activator)();
    void (*collectionAdd)(::Platform::Object^, ::Platform::Object^);
    void (*dictionaryAdd)(::Platform::Object^, ::Platform::Object^, ::Platform::Object^);
    ::Platform::Object^ (*fromStringConverter)(::XamlTypeInfo::InfoProvider::XamlUserType^, ::Platform::String^);
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    int     createFromStringIndex;
    ::Windows::UI::Xaml::Interop::TypeKind kindofType;
    bool    isLocalType;
    bool    isSystemType;
    bool    isReturnTypeStub;
    bool    isBindable;
};


std::function<::Platform::Object^(::Platform::String^)> CreateFromStringMethods[] =
{
    nullptr //Last entry is for padding
};

const TypeInfo TypeInfos[] = 
{
    //   0
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   1
    L"Double", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   2
    L"String", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   3
    L"Boolean", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   4
    L"SDKTemplate.MainPage", L"",
    &ActivateType<::SDKTemplate::MainPage>, nullptr, nullptr, nullptr,
    7, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   5
    L"SDKTemplate.MeteringData", L"",
    &ActivateType<::SDKTemplate::MeteringData>, nullptr, nullptr, nullptr,
    7, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   6
    L"SDKTemplate.ServiceViewModel", L"",
    &ActivateType<::SDKTemplate::ServiceViewModel>, nullptr, nullptr, nullptr,
    0, // Object
    1, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, true, 
    //   7
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    8, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   8
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    8, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    8, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    false, false, false, false,
};

const UINT TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      0,   //   6
      3,   //   7
      4,   //   8
      4,   //   9
      4,   //  10
      4,   //  11
      4,   //  12
      4,   //  13
      4,   //  14
      4,   //  15
      4,   //  16
      4,   //  17
      4,   //  18
      4,   //  19
      4,   //  20
      5,   //  21
      5,   //  22
      5,   //  23
      5,   //  24
      6,   //  25
      6,   //  26
      6,   //  27
      6,   //  28
      7,   //  29
      8,   //  30
      8,   //  31
      8,   //  32
      8,   //  33
      8,   //  34
      8,   //  35
      8,   //  36
      9,   //  37
};

struct MemberInfo 
{
    PCWSTR shortName;
    ::Platform::Object^ (*getter)(::Platform::Object^);
    void (*setter)(::Platform::Object^, ::Platform::Object^);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

const MemberInfo MemberInfos[] = 
{
    //   0 - SDKTemplate.MeteringData.ViewModel
    L"ViewModel",
    &GetReferenceTypeMember_ViewModel<::SDKTemplate::MeteringData>,
    &SetReferenceTypeMember_ViewModel<::SDKTemplate::MeteringData, ::SDKTemplate::ServiceViewModel>,
    6, // SDKTemplate.ServiceViewModel
    -1,
    false, false, false,
    //   1 - SDKTemplate.ServiceViewModel.SliderValue
    L"SliderValue",
    &GetValueTypeMember_SliderValue<::SDKTemplate::ServiceViewModel, ::default::float64>,
    &SetValueTypeMember_SliderValue<::SDKTemplate::ServiceViewModel, ::default::float64>,
    1, // Double
    -1,
    false, false, false,
    //   2 - SDKTemplate.ServiceViewModel.SliderEnabled
    L"SliderEnabled",
    &GetValueTypeMember_SliderEnabled<::SDKTemplate::ServiceViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_SliderEnabled<::SDKTemplate::ServiceViewModel, ::Platform::Boolean>,
    3, // Boolean
    -1,
    false, false, false,
    //   3 - SDKTemplate.ServiceViewModel.StopButtonEnabled
    L"StopButtonEnabled",
    &GetValueTypeMember_StopButtonEnabled<::SDKTemplate::ServiceViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_StopButtonEnabled<::SDKTemplate::ServiceViewModel, ::Platform::Boolean>,
    3, // Boolean
    -1,
    false, false, false,
    //   4 - SDKTemplate.ServiceViewModel.StartButtonEnabled
    L"StartButtonEnabled",
    &GetValueTypeMember_StartButtonEnabled<::SDKTemplate::ServiceViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_StartButtonEnabled<::SDKTemplate::ServiceViewModel, ::Platform::Boolean>,
    3, // Boolean
    -1,
    false, false, false,
    //   5 - SDKTemplate.ServiceViewModel.SampleMessage
    L"SampleMessage",
    &GetReferenceTypeMember_SampleMessage<::SDKTemplate::ServiceViewModel>,
    &SetReferenceTypeMember_SampleMessage<::SDKTemplate::ServiceViewModel, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //   6 - SDKTemplate.ServiceViewModel.ActualRpcCallbackRate
    L"ActualRpcCallbackRate",
    &GetReferenceTypeMember_ActualRpcCallbackRate<::SDKTemplate::ServiceViewModel>,
    &SetReferenceTypeMember_ActualRpcCallbackRate<::SDKTemplate::ServiceViewModel, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //   7 - SDKTemplate.ServiceViewModel.ExpectedRpcCallbackRate
    L"ExpectedRpcCallbackRate",
    &GetReferenceTypeMember_ExpectedRpcCallbackRate<::SDKTemplate::ServiceViewModel>,
    &SetReferenceTypeMember_ExpectedRpcCallbackRate<::SDKTemplate::ServiceViewModel, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
};

PCWSTR GetShortName(PCWSTR longName)
{
    PCWSTR separator = wcsrchr(longName, '.');
    return separator != nullptr ? separator + 1: longName;
}

const TypeInfo* GetTypeInfo(::Platform::String^ typeName)
{
    int typeNameLength = typeName->Length();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        for (UINT i = TypeInfoLookup[typeNameLength]; i < TypeInfoLookup[typeNameLength+1]; i++)
        {
            if (typeName == ::Platform::StringReference(TypeInfos[i].typeName))
            {
                return &TypeInfos[i];
            }
        }
    }
    return nullptr;
}

const MemberInfo* GetMemberInfo(::Platform::String^ longMemberName)
{
    for (int lastDotIndex = longMemberName->Length(); lastDotIndex >= 0; lastDotIndex--)
    {
        if (longMemberName->Data()[lastDotIndex] == '.')
        {
            const TypeInfo* pTypeInfo = GetTypeInfo(ref new ::Platform::String(longMemberName->Data(), lastDotIndex));
            const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            if (pTypeInfo)
            {
                PCWSTR shortMemberName = GetShortName(longMemberName->Data());
                for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
                {
                    if (wcscmp(shortMemberName, MemberInfos[i].shortName) == 0)
                    {
                        return &MemberInfos[i];
                    }
                }
            }
            break;
        }
    }
    return nullptr;
}

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    const TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (pTypeInfo == nullptr || pNextTypeInfo == nullptr)
    {
        return nullptr;
    }
    else if (pTypeInfo->isSystemType)
    {
        return ref new ::XamlTypeInfo::InfoProvider::XamlSystemBaseType(typeName);
    }
    else
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(
            this, 
            ::Platform::StringReference(pTypeInfo->typeName), 
            this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L"")));
        userType->KindOfType = pTypeInfo->kindofType;
        userType->Activator = pTypeInfo->activator;
        userType->CollectionAdd = pTypeInfo->collectionAdd;
        userType->DictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->FromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName = ::Platform::StringReference(pTypeInfo->contentPropertyName);
        userType->IsLocalType = pTypeInfo->isLocalType;
        userType->IsReturnTypeStub = pTypeInfo->isReturnTypeStub;
        userType->IsBindable = pTypeInfo->isBindable;
        userType->CreateFromStringMethod = nullptr;
        if (pTypeInfo->createFromStringIndex != -1)
        {
            userType->CreateFromStringMethod = &(CreateFromStringMethods[pTypeInfo->createFromStringIndex]);
        }
        int nextMemberIndex = pTypeInfo->firstMemberIndex;
        for (int i=pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
        {
            userType->AddMemberName(::Platform::StringReference(MemberInfos[i].shortName));
            nextMemberIndex++;
        }
        return userType;
    }
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = nullptr;
    const MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (pMemberInfo != nullptr)
    {
        xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(
            this,
            ::Platform::StringReference(pMemberInfo->shortName),
            ::Platform::StringReference(TypeInfos[pMemberInfo->typeIndex].typeName));
        xamlMember->Getter = pMemberInfo->getter;
        xamlMember->Setter = pMemberInfo->setter;
        xamlMember->TargetTypeName = pMemberInfo->targetTypeIndex >= 0 ? ::Platform::StringReference(TypeInfos[pMemberInfo->targetTypeIndex].typeName) : L"";
        xamlMember->IsReadOnly = pMemberInfo->isReadOnly;
        xamlMember->IsDependencyProperty = pMemberInfo->isDependencyProperty;
        xamlMember->IsAttachable = pMemberInfo->isAttachable;
    }
    return xamlMember;
}

